
// Mixins
//
//
//  1. Grid system
//  2. Flexbox
//  3. Media queries
//  4. Useful
//
//___________________________________

//  1. Grid system
//
//

@mixin container($space: var(--x-space)){
  width: 100%;
  @include center-m(var(--cont-width));
  @include space(x, $space);
}

@mixin col-sizing($size: null){
  @if($size){
    flex: 1 1 $size;
    max-width: $size;
  } @else{
    flex: 1 1 0;
  }
}

//  2. Flexbox
//
//

@mixin flex {
  display: flex;
  flex-wrap: wrap;
}

@mixin flexbox($align: center, $justify: flex-start, $wrap: wrap) {
  display: flex;
  flex-wrap: $wrap;
  justify-content: $justify;
  align-items: $align;
}
@mixin inline-flexbox($align: flex-start, $justify: flex-start, $wrap: wrap) {
  display: inline-flex;
  flex-wrap: $wrap;
  justify-content: $justify;
  align-items: $align;
}

@mixin flex-column($justify: flex-start, $align: stretch, $wrap: nowrap){
  @include flexbox($align, $justify, $wrap);
  flex-direction: column;
}

@mixin slider{
  @content;
}

//  3. Media queries
// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//  3.2 respond-below(max-width)

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//  3.3 respond-between(min-width - max-width)

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

//  4. Useful
//
//

// Clearfix
@mixin clearfix {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// Placeholder

@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}
// Centering with transform

@mixin center($position: both) {
  position: absolute;

  @if $position == 'y' {
    top: 50%;
    transform: translateY(-50%);
  }
  @else if $position == 'x' {
    left: 50%;
    transform: translateX(-50%);
  }
  @else{
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// Image cover
@mixin img-cover {
  position: absolute;
  top: 0;
  left: 0;
  @include size(100%);
  object-fit: cover;
}

// Centering with margins
@mixin center-m($max-widths: none){
  @include m-space(auto);
  max-width: $max-widths;
}
// Absolute pseudo element

@mixin pseudo($content: '', $display: block, $pos: absolute){
  content: $content;
  display: $display;
  position: $pos;
}
@mixin pseudoLink($display: inline-block, $pos: absolute, $content: ''){
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 999;
  cursor: pointer;
  @include pseudo($content, $display, $pos);
}

@mixin pseudoBG($display: block, $pos: absolute,$repeat: no-repeat, $bgpos: 50%, $size: contain, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
  background: {
    repeat: $repeat;
    position: $bgpos;
    size: $size;
  }
}

@mixin pseudoHeight($paddingT: 100%, $full: true){
  position: relative;
  padding-top: $paddingT;
  display: block;
  > img, svg{
    @if($full == true) {
      @include img-cover;
    } @else{
      max-width: 100%;
      max-height: 100%;
      @include size(auto);
      @include center();
    }
  }
}
@mixin pseudoOverlay($bg, $opacity:1, $z-index:0){
  @include pseudo();
  background: $bg;
  @include size(100%);
  left: 0;
  top: 0;
  opacity: $opacity;
  z-index: $z-index;
  pointer-events: none;
}

// Setting width/height

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
@mixin image($size, $rad: 50%) {
  @include size($size);
  border-radius: $rad;
}

@mixin animate($animation,$duration,$method,$times){
  animation: {
    name: $animation;
    duration: $duration;
    timing-function: $method;
    iteration-count: $times;
  }
}

@mixin keyframes($name){
  @keyframes #{$name}{
    @content;
  }
}

// CSS arrow
@mixin arrow($dir: down, $size: .5rem, $color: var(--primary-text-color)){
  border: 1px solid $color;
  border-top: none;
  border-right: none;
  @include pseudo();
  @include size($size);
  @if ($dir == down){
    transform: rotateZ(-45deg);
  }
  @else if ($dir == left){
    transform: rotateZ(45deg);
  }
  @else if ($dir == right){
    transform: rotateZ(225deg);
  }
  @else if ($dir == up){
    transform: rotateZ(135deg);
  }
}

@mixin arrow-fill($dir: down, $size: 5px, $color: var(--primary-color)) {
  width: 0;
  height: 0;
  @if ($dir == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($dir == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
  @else if ($dir == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }
  @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}

// Text-overflow

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Antialias

@mixin antialias {
  font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}



// hide/show

@mixin hide {
  opacity: 0;
  pointer-events: none;
  visibility: hidden;
}

@mixin show {
  opacity: 1;
  pointer-events: auto;
  visibility: visible;
}

// height=lineheight

@mixin lineHeight($height, $lineheight: $height) {
  height: $height;
  line-height: $lineheight;
}

// listReset

@mixin listReset() {
  list-style: none;
  margin: 0;
  padding: 0;
}

// null margin

@mixin txtM0() {
  &:first-child{
    margin-top: 0;
  }
  &:last-child{
    margin-bottom: 0;
  }
}
// set side space

@mixin space($dir:'', $padding1:10px, $padding2:$padding1) {
  @if $dir == 'x' {
    padding-left: $padding1;
    padding-right: $padding2;
  }
  @else if $dir == 'y' {
    padding-top: $padding1;
    padding-bottom: $padding2;
  }
  @else{
    padding: $padding1;
  }
}
@mixin m-space($marginL:-15px, $marginR: $marginL) {
  margin-left: $marginL;
  margin-right: $marginR;
}

// transition
@mixin trns($name: all, $duration: 0.3s, $tm-func: ease, $delay: 0s){
  transition: $name $duration $tm-func $delay;
}

//
@mixin img-eff-hide(){
  opacity: 0;
  transform: translateY(100%) scaleX(0.7);
  transform-origin: bottom;
  object-fit: cover;
  @include trns(all, 0.8s, ease, .6s);
}
@mixin img-eff(){
  @include img-eff-hide();
  .in-visible &{
    opacity: 1;
    transform: translateY(0) scaleX(1);
  }
}

// fonts
@mixin font-generate($face, $weight: normal, $filename: $face){
  @font-face {
    font-family: $face;
    src: url('../fonts/#{$filename}.eot');
    src: url('../fonts/#{$filename}.eot') format('embedded-opentype'),
    url('../fonts/#{$filename}.woff2') format('woff2'),
    url('../fonts/#{$filename}.woff') format('woff'),
    url('../fonts/#{$filename}.ttf') format('truetype'),
    url('../fonts/#{$filename}.svg#UniviaProBold') format('svg');
    font-weight: $weight;
    font-display: swap;
  }
}
@mixin font($f:var(--font-main), $w: 300){
  font: {
    family: $f;
    weight: $w;
  };
}

 // special mixins
@mixin secondImg{
  img{
    &:nth-child(2){
      @content;
    }
  }
}